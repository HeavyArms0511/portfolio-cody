{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/portfolio-cody/src/Particles.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Particles extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.generateParticles = () => {\n      const canvas = document.getElementById(\"particles\");\n      const ctx = canvas.getContext(\"2d\");\n      canvas.width = document.documentElement.clientWidth;\n      canvas.height = document.documentElement.clientHeight;\n      let num = 150;\n      let size = 1;\n      let color = \"#fff\";\n      let min_speed = 0.1;\n      let max_speed = 0.5;\n      let line_distance = 80;\n      let particles = [];\n\n      const distance = (pointA, pointB) => {\n        let dx = Math.abs(pointB.x - pointA.x);\n        let dy = Math.abs(pointB.y - pointA.y);\n        return Math.sqrt(dx * dx + dy * dy);\n      };\n\n      const randVelocity = () => {\n        return max_speed * Math.random() - min_speed;\n      };\n\n      class Particle {\n        constructor() {\n          this.x = Math.random() * canvas.width;\n          this.y = Math.random() * canvas.height; // Random velocities, that will move the particle in a random direction. ex: -1 on the x-plane and 1 on the y-plane.\n\n          this.vx = randVelocity();\n          this.vy = randVelocity();\n          this.color = color;\n          this.radius = Math.floor(Math.random() * 3) + 0.5;\n        }\n\n      }\n\n      for (let i = 0; i < num; i++) {\n        particles.push(new Particle());\n      }\n\n      const draw = () => {\n        ctx.fillStyle = \"#22262a\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height); // Lets draw particles from the array now\n\n        for (let t = 0; t < particles.length; t++) {\n          // This particle\n          let p = particles[t];\n\n          for (let q = 0; q < particles.length; q++) {\n            // Check position distance\n            if (distance(particles[q], p) <= line_distance) {\n              ctx.beginPath();\n              ctx.lineWidth = 0.2;\n              ctx.strokeStyle = \"#fff\";\n              ctx.moveTo(p.x, p.y);\n              ctx.lineTo(particles[q].x, particles[q].y);\n              ctx.stroke();\n            }\n          }\n\n          ctx.fillStyle = color;\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, p.radius, Math.PI * 2, false);\n          ctx.fill();\n          p.x += p.vx;\n          p.y += p.vy; // Invert values if they touch the canvas borders\n\n          if (p.x <= size || p.x >= canvas.width - size) {\n            p.vx *= -1;\n          }\n\n          if (p.y <= size || p.y > +canvas.height - size) {\n            p.vy *= -1;\n          }\n        }\n\n        requestAnimationFrame(draw);\n      };\n\n      draw();\n    };\n  }\n\n  componentDidMount() {\n    this.generateParticles();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"particles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","Particles","Component","generateParticles","canvas","document","getElementById","ctx","getContext","width","documentElement","clientWidth","height","clientHeight","num","size","color","min_speed","max_speed","line_distance","particles","distance","pointA","pointB","dx","Math","abs","x","dy","y","sqrt","randVelocity","random","Particle","constructor","vx","vy","radius","floor","i","push","draw","fillStyle","fillRect","t","length","p","q","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","arc","PI","fill","requestAnimationFrame","componentDidMount","render"],"sources":["/Users/learnacademy/Desktop/portfolio-cody/src/Particles.jsx"],"sourcesContent":["import React from \"react\";\n \nexport default class Particles extends React.Component {\n  componentDidMount() {\n    this.generateParticles();\n  }\n \n  generateParticles = () => {\n    const canvas = document.getElementById(\"particles\");\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight;\n \n    let num = 150;\n    let size = 1;\n    let color = \"#fff\";\n    let min_speed = 0.1;\n    let max_speed = 0.5;\n    let line_distance = 80;\n    let particles = [];\n \n    const distance = (pointA, pointB) => {\n      let dx = Math.abs(pointB.x - pointA.x);\n      let dy = Math.abs(pointB.y - pointA.y);\n      return Math.sqrt(dx * dx + dy * dy);\n    };\n \n    const randVelocity = () => {\n      return max_speed * Math.random() - min_speed;\n    };\n \n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n \n        // Random velocities, that will move the particle in a random direction. ex: -1 on the x-plane and 1 on the y-plane.\n        this.vx = randVelocity();\n        this.vy = randVelocity();\n \n        this.color = color;\n        this.radius = Math.floor(Math.random() * 3) + 0.5;\n      }\n    }\n \n    for (let i = 0; i < num; i++) {\n      particles.push(new Particle());\n    }\n \n    const draw = () => {\n      ctx.fillStyle = \"#22262a\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n \n      // Lets draw particles from the array now\n      for (let t = 0; t < particles.length; t++) {\n        // This particle\n        let p = particles[t];\n \n        for (let q = 0; q < particles.length; q++) {\n          // Check position distance\n          if (distance(particles[q], p) <= line_distance) {\n            ctx.beginPath();\n            ctx.lineWidth = 0.2;\n            ctx.strokeStyle = \"#fff\";\n            ctx.moveTo(p.x, p.y);\n            ctx.lineTo(particles[q].x, particles[q].y);\n            ctx.stroke();\n          }\n        }\n \n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(p.x, p.y, p.radius, Math.PI * 2, false);\n        ctx.fill();\n \n        p.x += p.vx;\n        p.y += p.vy;\n \n        // Invert values if they touch the canvas borders\n        if (p.x <= size || p.x >= canvas.width - size) {\n          p.vx *= -1;\n        }\n        if (p.y <= size || p.y > +canvas.height - size) {\n          p.vy *= -1;\n        }\n      }\n \n      requestAnimationFrame(draw);\n    };\n \n    draw();\n  };\n  render() {\n    return <canvas id=\"particles\"></canvas>;\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}